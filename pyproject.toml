[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "image_processor"
version = "0.1.0"
description = "娯楽用動画・画像素材加工のためのツール群"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Author", email = "author@example.com"},
]
keywords = ["image", "video", "processing", "conversion", "background-removal"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "pillow>=10.0.0",
    "tqdm>=4.64.0",
    # "rembg>=2.0.50",  # Python 3.12互換性問題のため一旦コメントアウト
    # "wand>=0.6.0",  # 一旦コメントアウト（ImageMagick依存）
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.88.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "pip-audit>=2.6.0",
    "types-pillow",
    "types-tqdm",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.88.0",
]
all = ["image_processor[dev,test]"]

[project.urls]
Homepage = "https://github.com/user/image_processor"
Repository = "https://github.com/user/image_processor"
Issues = "https://github.com/user/image_processor/issues"

[project.scripts]
image-processor = "image_processor.cli:main"

[tool.uv]
dev-dependencies = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.88.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "pip-audit>=2.6.0",
    "types-pillow",
    "types-tqdm",
]

[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ANN", # flake8-annotations
    "S",   # bandit
    "ERA", # eradicate
    "PL",  # pylint
    "PERF", # perflint
    "RUF",  # ruff-specific rules
]
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "S101",   # Use of `assert` detected
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of `assert` detected (ok in tests)
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # Missing return type annotation for public function
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "rembg.*",
    "wand.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-config",
    "--strict-markers",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "property: marks tests as property-based tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]